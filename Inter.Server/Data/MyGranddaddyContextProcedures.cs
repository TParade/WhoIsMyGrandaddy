// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Inter.Server.Data;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Inter.Server.Data
{
    public partial class MyGranddaddyContext
    {
        private IMyGranddaddyContextProcedures _procedures;

        public virtual IMyGranddaddyContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new MyGranddaddyContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IMyGranddaddyContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<FamilyTreeGetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<FamilyTreeRootGetResult>().HasNoKey().ToView(null);
        }
    }

    public partial class MyGranddaddyContextProcedures : IMyGranddaddyContextProcedures
    {
        private readonly MyGranddaddyContext _context;

        public MyGranddaddyContextProcedures(MyGranddaddyContext context)
        {
            _context = context;
        }

        public virtual async Task<List<FamilyTreeGetResult>> FamilyTreeGetAsync(string identityNumber, OutputParameter<int?> FatherCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterFatherCount = new SqlParameter
            {
                ParameterName = "FatherCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = FatherCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "identityNumber",
                    Size = 20,
                    Value = identityNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterFatherCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<FamilyTreeGetResult>("EXEC @returnValue = [Site].[FamilyTreeGet] @identityNumber, @FatherCount OUTPUT", sqlParameters, cancellationToken);

            FatherCount.SetValue(parameterFatherCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<FamilyTreeRootGetResult>> FamilyTreeRootGetAsync(string identityNumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "identityNumber",
                    Size = 20,
                    Value = identityNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<FamilyTreeRootGetResult>("EXEC @returnValue = [Site].[FamilyTreeRootGet] @identityNumber", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
